{
  "about": {
    "intro": {
      "title": {
        "1": "Bumang!",
        "2": "제품의 처음부터 끝까지."
      },
      "desc": "저는 산업디자인을 전공했고, UX/UI 디자이너로 커리어를 시작하여 프론트엔드 개발자가 되었습니다. 장기적으로는 디지털 제품의 A부터 Z까지 제가 혼자 만드는 1인 개발자가 되는 것이 목표이며, 이를 위해 풀스택 개발을 익히고 있습니다. 또한 예술에 대한 열정이 있으며, 그림을 그리거나 멋진 그래픽을 만드는 것을 즐깁니다. 특히 웹에서 인터랙티브한 2D/3D 콘텐츠를 만드는 것에 관심이 많으며, 개인 개발 프로젝트를 진행하며 새로운 기술을 실험해보는 것을 즐깁니다. 흥미로운 사이드 프로젝트 아이디어는 언제나 환영입니다!"
    },
    "record": {
      "2024": {
        "title": "BlockS",
        "desc": "프론트엔드 개발자 근무"
      },
      "2023": {
        "title": "야놀자 테크 스쿨 프론트엔드 과정",
        "desc": "우수졸업생"
      },
      "2022": {
        "title": "네이버 부스트코스 Python 코칭 스터디",
        "desc": "리드 부스터"
      },
      "2021": {
        "title": "카카오 x 한국관광공사 여행데이터 공모전",
        "desc": "최우수상 - UX디자이너로서 참여"
      },
      "2019": {
        "title": "서울시립대학교 장산곶매 마스코트 캐릭터디자인 공모전",
        "desc": "우수상"
      }
    },
    "techStack": {
      "webFrontEnd": {
        "1": {
          "title": "React/Next.js",
          "desc": "SPA 라이브러리/프레임워크"
        },
        "2": {
          "title": "Tailwind, StyledComponents",
          "desc": "스타일링"
        },
        "3": {
          "title": "React-Hook-Form, Zod",
          "desc": "스키마 유효성 검증"
        },
        "4": {
          "title": "Axios, TanstackQuery",
          "desc": "서버 호출 캐싱"
        },
        "5": {
          "title": "Zustand, ReduxToolkit",
          "desc": "전역 상태 관리"
        },
        "6": {
          "title": "Gsap, Three.js, Motion",
          "desc": "인터랙티브/애니메이션"
        }
      },
      "appFrontEnd": {
        "1": {
          "title": "React Native",
          "desc": "크로스플랫폼 프레임워크"
        },
        "2": {
          "title": "StyleSheet",
          "desc": "스타일링"
        },
        "3": {
          "title": "React Native Codepush",
          "desc": "즉석 업데이트"
        },
        "4": {
          "title": "React Native Firebase FCM",
          "desc": "푸시 알림"
        },
        "5": {
          "title": "React Native Reanimated",
          "desc": "인터랙티브/애니메이션"
        }
      },
      "backend": {
        "1": {
          "title": "express.js, Nest.js",
          "desc": "백엔드 프레임워크"
        },
        "2": {
          "title": "Firebase",
          "desc": "백엔드 서비스 (BaaS)"
        },
        "3": {
          "title": "PostgresQL, MongoDB",
          "desc": "데이터베이스"
        },
        "4": {
          "title": "TypeORM",
          "desc": "ORM"
        },
        "5": {
          "title": "AWS EC2",
          "desc": "가상 클라우드 서버"
        },
        "6": {
          "title": "AWS S3",
          "desc": "가상 파일 저장소"
        }
      },
      "cicd": {
        "1": {
          "title": "Git, Github",
          "desc": "분산 버전 관리 & 협업"
        },
        "2": {
          "title": "Github Action",
          "desc": "CI/CD 자동화"
        },
        "3": {
          "title": "Docker, DockerCompose",
          "desc": "컨테이너 가상화 도구"
        }
      },
      "design": {
        "1": {
          "title": "Figma",
          "desc": "UX/UI 작업"
        },
        "2": {
          "title": "Photoshop, Illustration",
          "desc": "그래픽 디자인"
        },
        "3": {
          "title": "After Effect",
          "desc": "모션그래픽"
        },
        "4": {
          "title": "UG NX, Keyshot",
          "desc": "3D 모델링 & 렌더링"
        },
        "5": {
          "title": "ClipStudio, ProCreate(iPad)",
          "desc": "아트 & 일러스트레이션"
        }
      },
      "basicLevel": {
        "1": {
          "title": "SCSS",
          "desc": "스타일링"
        },
        "2": {
          "title": "Redux-Tookit, Jotai",
          "desc": "전역 상태 관리"
        },
        "3": {
          "title": "P5.js, Phaser3.js",
          "desc": "인터랙티브 개발"
        },
        "4": {
          "title": "Blender, Cinema4D",
          "desc": "3D 모델링 & 모션그래픽"
        }
      }
    }
  },
  "work": {
    "bumangRoute53": {
      "tag": "사이드 프로젝트",
      "projectScale": "개인 프로젝트",
      "role": "풀스택",
      "desc": "개인 블로그 & 포트폴리오",
      "1": {
        "title": "블로그 애플리케이션을 위한 Nest.js 백엔드 구축",
        "a": "블로그 CRUD 기능 구현",
        "b": {
          "title": "Guards와 커스텀 Decorators를 사용하여 인증 및 권한 부여 추상화",
          "i": "TypeORM QueryBuilder를 사용하여 SQL 쿼리를 쉽게 조작",
          "ii": "점수 기반 관련성 알고리즘을 기반으로 관련 게시물 생성",
          "iii": "블로그 편집 중 삽입된 이미지가 클라이언트에서 S3로 직접 업로드되도록 presigned S3 URL을 프론트엔드로 전송"
        },
        "c": {
          "title": "Docker 및 AWS EC2 배포를 위한 CI/CD 최적화",
          "i": "Docker Compose를 사용하여 Nest.js 앱과 PostgreSQL 데이터베이스를 컨테이너화하고 Docker 이미지를 통해 배포",
          "ii": "Docker를 사용하여 로컬 개발 환경 미러링",
          "iii": "GitHub Actions로 자동 배포: EC2에 SSH 접속, 최신 Docker 이미지 pull, 컨테이너 재시작",
          "iv": "배포 시 오래된 Docker 이미지 캐시 제거, 최신 3개 이미지만 유지"
        }
      },
      "2": {
        "title": "SEO와 데이터 페칭 최적화에 중점을 둔 SSR과 CSR 간의 관심사 분리 전략 수립",
        "a": {
          "title": "SEO가 필요한 정적 데이터는 SSR을 사용하고, 인증된 콘텐츠는 CSR을 통해 처리",
          "i": "쿠키 기반 인증 전략 사용 시 SSR이 httpOnly 쿠키를 읽어야 하는지 고려"
        }
      },
      "3": {
        "title": "인터랙티브 애니메이션 라이브러리와 Headless UI를 결합하여 고품질 컴포넌트 구축",
        "a": "MetaMask, WalletConnect 등 주요 지갑 연결 및 지갑 정보 조회",
        "b": "mousedown과 mouseup의 pageX 값 차이를 계산하여 스와이프 방향을 결정하고, 차이가 특정 임계값을 초과하면 캐러셀이 다음 슬라이드로 진행",
        "c": "useEffect와 setInterval을 사용하여 3초마다 실행되는 무한 슬라이드 애니메이션 생성, mouseenter와 mouseleave 이벤트로 애니메이션 일시정지 및 재개. 메모리 누수 방지를 위해 페이지 언마운트 시 interval 정리"
      },
      "4": "i18n(국제화) 및 다크 모드와 같은 유틸리티 기능 구현"
    },
    "seaPearl": {
      "tag": "업무 프로젝트",
      "projectScale": "팀 프로젝트",
      "role": "전담 프론트엔드 개발자",
      "desc": "텔레그램 미니앱 탭 게임",
      "1": {
        "title": "텔레그램 내 웹뷰 기반 프론트엔드를 사용하여 초기 제품을 개발 및 배포",
        "a": "ngrok을 사용하여 텔레그램 개발 환경을 구성하고, 개발과 배포 모두에 활용",
        "b": {
          "title": "iframe 기반 미니 앱 환경 내에서 웹뷰로 프론트엔드 배포",
          "i": "텔레그램 미니 앱 글로벌 브라우저 API를 사용하여 사용자 인증 데이터를 가져오는 초기화 로직 구현",
          "ii": "개발 환경에서 미니 앱 API 사용을 위해 로컬 환경을 ngrok으로 노출하고 텔레그램 봇에 등록"
        }
      },
      "2": {
        "title": "인앱 광고를 위한 Adsgram SDK 설치",
        "a": "Adsgram 서버로부터 성공/실패 결과를 받아 백엔드 API 서버로 전달하는 로직 구현",
        "b": "사용자가 광고를 건너뛰거나, 앱을 백그라운드로 보내거나, 앱 관리자 화면에 머물러 있을 경우 광고 시청을 실패로 처리"
      },
      "3": {
        "title": "react-virtuoso를 사용한 가상화된 리스트 구축",
        "a": "무한히 증가하는 데이터 리스트를 처리할 수 있도록 가상화된 리스트 구성"
      },
      "4": {
        "title": "디바운스와 글로벌 캐싱을 사용하여 탭핑 게임의 API 호출 최적화, 비용 효율성과 보안의 균형을 맞춤",
        "a": {
          "title": "탭핑 횟수를 디바운스로 집계하여 마지막 탭 후 3초 뒤 서버로 전송",
          "i": "사용자가 3초 이내에 화면을 나갈 경우, useEffect cleanup 함수를 사용하여 언마운트 전 서버 업데이트 보장",
          "ii": "탭 카운트를 지속적인 글로벌 상태로 만들어 앱 재시작 시 예상치 못한 종료 후에도 서버로 카운트가 전송되도록 함",
          "iii": "글로벌 상태 업데이트 함수에서 서버 패칭과 상태 클리어를 결합하여 예상치 못한 오류 발생 시 원래 상태가 그대로 유지되도록 함"
        }
      },
      "5": {
        "title": "고급 인터랙티브 탭핑 애니메이션",
        "a": {
          "title": "탭핑 횟수를 디바운스로 집계하여 마지막 탭 후 3초 뒤 서버로 전송",
          "i": "포인트 획득 애니메이션의 베지어 경로 방향을 제어하기 위해 랜덤 값을 사용하고, 각 탭마다 3분의 1 확률로 포인트를 획득하도록 하여 시각적 경험을 향상"
        }
      }
    },
    "anttimeSwap": {
      "tag": "업무 프로젝트",
      "projectScale": "팀 프로젝트",
      "role": "프론트엔드 전담 개발자",
      "desc": "포인트 토큰 교환 에어드롭 플랫폼",
      "1": {
        "title": "React 서버 컴포넌트와 클라이언트 컴포넌트 활용 전략 수립",
        "a": "서버 사이드에서 토큰 스왑 기간 메타데이터를 가져와 접근 제어 관리",
        "b": "권한이나 타이밍 기반의 인증 로직을 클라이언트 사이드 코드에 노출하지 않아 보안 강화",
        "c": "렌더링 요구사항에 따라 서버 컴포넌트(SEO 중요 페이지 등)와 클라이언트 컴포넌트의 명확한 사용 사례 정의"
      },
      "2": {
        "title": "TanStack Query의 useSuspenseQuery와 Suspense, ErrorBoundary를 활용한 상태별 관심사 분리",
        "a": "Suspense와 ErrorBoundary를 사용하여 로딩/에러 상태를 격리하고 컴포넌트 복잡성 감소",
        "b": "API 요청 블로킹을 최소화하는 아키텍처 설계",
        "c": "비동기 로딩 중 스켈레톤 로더로 UX 개선",
        "d": "SSR 환경에서 클라이언트 사이드 의존성이 필요한 컴포넌트를 위해 Suspensive 라이브러리의 ClientOnly 옵션 사용"
      },
      "3": {
        "title": "WAGMI를 사용한 Web3 지갑 연결 및 트랜잭션 처리 구현",
        "a": "MetaMask와 WalletConnect 등 주요 지갑 연결 및 지갑 정보 가져오기",
        "b": "스마트 컨트랙트 상호작용을 통한 토큰 스왑 활성화"
      },
      "4": {
        "title": "GSAP을 사용한 순차적 '점수 평가' 애니메이션 생성",
        "a": "useContext를 사용하여 컴포넌트 간 애니메이션 타이밍 상태 공유"
      }
    },
    "anttimeApp": {
      "tag": "업무 프로젝트",
      "projectScale": "팀 프로젝트",
      "role": "프론트엔드 개발자",
      "desc": "크로스플랫폼 포인트 채굴 앱",
      "1": {
        "title": "프로덕션과 개발 환경 분리",
        "a": {
          "title": "네이티브 빌드 구성을 개발/프로덕션 환경으로 분리",
          "i": "각 개발 환경에 대해 Firestore 설정 및 그에 맞는 환경 변수 파일 구성",
          "ii": "iOS용 Xcode 빌드 스킴과 Android용 Android 플레이버를 사용하여 네이티브 빌드 중 react-native-firebase의 환경별 설정 구성"
        }
      },
      "2": {
        "title": "React Native 버전 업데이트",
        "a": "오래된 RN 버전으로 인해 라이브러리 지원이 중단되어 구버전 라이브러리 사용 필요",
        "b": "React Native Upgrade Helper를 사용하여 0.68에서 0.74로 업그레이드하고 그에 맞게 네이티브 코드 수정 (Flipper 제거, Fabric 구성, iOS/Android 메타데이터 업데이트)",
        "c": "새로운 RN 버전에 맞게 라이브러리 구성 업그레이드"
      },
      "3": {
        "title": "Google Play Store Referral API를 사용한 딥링크 구현",
        "a": "사용자의 운영체제에 따라 적절한 스토어 링크로 리디렉션하는 딥링크 개발",
        "b": "추가로 추천인 링크 쿼리 스트링을 사용하여 앱 진입 시 추천인 코드 자동 입력",
        "c": "Firebase Dynamic Links의 지원 중단으로 인해 Google Play Store Referral API를 사용하여 추천인 코드와 함께 딥링크 통합 완료"
      },
      "4": {
        "title": "애니메이션 작업 스킨 업데이트",
        "a": {
          "title": "사용자가 앱 내 화폐를 사용하여 개별 신체 부위 스킨을 구매할 수 있는 스킨 페이지 개발",
          "i": "사용자 신체 부위 데이터를 가져와 동적으로 스킨 애니메이션 및 부위 교체를 업데이트하는 기능 구현",
          "ii": "주요 공휴일 및 이벤트에 맞춘 시즌 스킨 출시"
        },
        "b": {
          "title": "React Native Reanimated를 사용한 복잡한 채굴 애니메이션",
          "i": "기존 채굴 애니메이션은 미리 정의된 복장의 캐릭터로 하나의 고정 애니메이션을 재생하는 Lottie로 구현되었습니다. 스킨 업데이트를 지원하기 위해 애니메이션을 개별 부위로 분리해야 했습니다",
          "ii": "react-native-reanimated를 사용하여 각 부위에 대한 애니메이션 타임라인을 생성하고 매끄럽고 조화로운 재생 구현"
        }
      }
    },
    "percentHotel": {
      "tag": {
        "1": "야놀자 부트캠프",
        "2": "전체 2등 (12팀 중)"
      },
      "projectScale": "팀 프로젝트",
      "role": "프론트엔드 리더",
      "desc": "숙박 매물 양도 플랫폼",
      "1": {
        "title": "커스텀 애니메이션 캐러셀 라이브러리",
        "a": {
          "title": "슬라이드 애니메이션 구현",
          "i": "1차 이체 가격, 2차 가격 구성 상태, 2차 가격 타이밍, 2차 가격 값, 은행 계좌 등록 상태, 야놀자 인증, 약관 동의 상태 등 다양한 비즈니스 규칙을 기반으로 사용자가 다음 단계로 진행할 수 있는지 판단하는 커스텀 훅 개발",
          "ii": "마우스다운과 마우스업 pageX 값의 차이를 계산하여 스와이프 방향을 결정하고, 차이가 특정 임계값을 초과하면 캐러셀이 다음 슬라이드로 진행하도록 구현",
          "iii": "useEffect와 setInterval을 사용하여 3초마다 실행되는 무한 슬라이드 애니메이션을 생성하고, mouseenter와 mouseleave 이벤트를 사용하여 애니메이션을 일시정지/재개. 메모리 누수를 방지하기 위해 페이지 언마운트 시 인터벌 정리"
        },
        "b": {
          "title": "모바일과 데스크톱에서 일관된 사용자 경험 제공",
          "i": "TouchEvent와 MouseEvent를 모두 지원하여 모바일과 데스크톱 환경에서 드래그 기능 활성화",
          "ii": "터치 이벤트가 감지되면 마우스 이벤트를 취소하여 의도하지 않은 클릭 방지"
        }
      },
      "2": {
        "title": "커스텀 훅을 사용한 복잡한 비즈니스 로직 처리",
        "a": {
          "title": "커스텀 훅을 사용하여 복잡한 비즈니스 로직 예외 처리",
          "i": "1차 이체 가격, 2차 가격 구성 상태, 2차 가격 타이밍, 2차 가격 값, 은행 계좌 등록 상태, 야놀자 인증, 약관 동의 상태 등 다양한 비즈니스 규칙을 기반으로 사용자가 다음 단계로 진행할 수 있는지 판단하는 커스텀 훅 개발"
        },
        "b": {
          "title": "결제 수단이 없을 경우 결제 수단 등록 페이지로 리디렉션하면서 돌아올 때 폼 상태 보존",
          "i": "은행 계좌가 아직 등록되지 않은 경우 페이지를 이동하는 대신 같은 페이지 내에서 결제 수단 등록 컴포넌트로 전환하여 사용자 입력을 보존하는 플로우 구현. 이를 통해 이전에 입력한 모든 상태가 그대로 유지됨",
          "ii": "돌아올 때 내부 상태는 유지되었지만 일부 브라우저 제어 요소(체크박스 체크 상태 등)가 시각적으로 리셋되는 문제 발생. 컴포넌트 전환 시 현재 상태를 기반으로 UI 일관성을 복원하는 훅을 생성하여 해결"
        }
      },
      "3": {
        "title": "푸시 알림을 위한 Firebase Cloud Messaging(FCM) 구현",
        "a": "로그인 시 FCM 토큰을 초기화하는 커스텀 훅 생성",
        "b": "Firebase 서비스 워커를 통해 백그라운드 푸시 알림 수신",
        "c": "Android, iOS, 웹, PWA 환경에서 푸시 알림 테스트"
      },
      "4": {
        "title": "React 애플리케이션에서 SEO 최적화",
        "a": "React Helmet과 React Snap을 사용한 사전 렌더링 구현",
        "b": "최적화 후 Lighthouse SEO 점수를 77에서 100으로 향상"
      },
      "5": {
        "title": "팀 운영 리더십",
        "a": "아침 스탠드업 미팅을 통한 일일 진행 상황 공유",
        "b": {
          "title": "병합 전 전체 팀 코드 리뷰 필수화",
          "i": "'수고했습니다' 같은 댓글은 지양하고, 리뷰어는 코드를 꼼꼼히 읽은 후 의미 있는 피드백을 남기도록 함"
        },
        "c": {
          "title": "프로젝트 중간에 두 명의 팀원이 취업 면접 준비를 위해 팀을 떠나면서 팀 사기에 영향을 준 상황 처리",
          "i": "떠나는 멤버들에게 연락하여 어떤 기능을 작업하고 있었는지, 미완성된 것은 무엇인지 파악한 후 남은 팀원들에게 작업 재분배",
          "ii": "개발 동력을 유지하기 위해 철저한 코드 리뷰에 집중하고 PR 제출 후 3시간 내 피드백을 주는 문화 구축. 좋은 작업에 대한 긍정적 강화도 강조",
          "iii": "결과적으로 가장 생산적인 팀원 중 한 명이 프로젝트 회고에서 지지적인 팀 문화가 끝까지 동기부여를 유지하는 데 도움이 되었다고 언급"
        }
      }
    }
  }
}
